package com.employee.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.employee.modal.Employee;
import com.employee.modal.EmployeeDTO;

public class EmployeeServiceTest {

    @Mock
    private EmployeeRepository employeeRepository;

    @InjectMocks
    private EmployeeService employeeService;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testSaveEmployees() {
        // Mock data
        EmployeeDTO employeeDTO1 = new EmployeeDTO("John Doe", "IT", 5000, "USD", "May-20-2022", "May-20-2023");
        EmployeeDTO employeeDTO2 = new EmployeeDTO("Jane Smith", "HR", 4000, "EUR", "Jan-01-2021", "Dec-31-2021");
        EmployeesRequest request = new EmployeesRequest(Arrays.asList(employeeDTO1, employeeDTO2));

        // Mock behavior
        when(employeeRepository.save(any(Employee.class))).thenReturn(new Employee());

        // Call service method
        employeeService.saveEmployees(request);

        // Verify interactions
        verify(employeeRepository, times(2)).save(any(Employee.class)); // Should save two employees
    }

    @Test
    public void testGetEligibleEmployees() {
        // Mock data
        List<Employee> mockEmployees = Arrays.asList(
                new Employee("John Doe", "IT", 5000, "USD", "2022-05-20", "2023-05-20"),
                new Employee("Jane Smith", "HR", 4000, "EUR", "2021-01-01", "2021-12-31")
        );
        when(employeeRepository.findByJoiningDateBeforeAndExitDateAfter(any(), any())).thenReturn(mockEmployees);

        // Call service method
        String date = "May-27-2022"; // Format according to your date format in service
        EmployeeResponse response = employeeService.getEligibleEmployees(date);

        // Verify result
        assertEquals(2, response.getData().size()); // Assuming two employees are eligible
    }
}

